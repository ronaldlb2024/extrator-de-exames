(function(){
  // ===== EXTRACTOR – Caixa de Texto (VERSÃO 6) =====

  const OLD = document.getElementById('lab-panel-textbox'); if(OLD) OLD.remove();
  const wrap = document.createElement('div');
  wrap.id = 'lab-panel-textbox';
  wrap.style.cssText = 'position:fixed;right:12px;bottom:12px;z-index:2147483647;background:#0b1220;color:#e7eefc;border:1px solid #1f2b48;border-radius:12px;box-shadow:0 8px 24px rgba(0,0,0,.35);max-width:720px;width:720px;font:14px/1.45 system-ui,Segoe UI,Roboto,Helvetica,Arial;padding:12px';
  wrap.innerHTML = `
    <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px">
      <strong>Extrator de Exames – Caixa de Texto (v6)</strong>
      <div><button id="lab-close">Fechar</button></div>
    </div>
    <div style="display:grid;grid-template-columns:1fr;gap:8px">
      <label style="opacity:.85">Cole aqui o laudo bruto (Ctrl+V):</label>
      <textarea id="in" style="width:100%;height:180px;border-radius:8px;background:#0f172a;color:#e7eefc;border:1px solid #27314e;padding:8px"></textarea>
      <div>
        <button id="btn-extract" style="margin-right:8px">Extrair</button>
        <button id="btn-clear-in" style="margin-right:8px">Limpar entrada</button>
      </div>
      <label style="opacity:.85">Saída (linha pronta):</label>
      <textarea id="out" style="width:100%;height:140px;border-radius:8px;background:#0f172a;color:#e7eefc;border:1px solid #27314e;padding:8px"></textarea>
      <div>
        <input id="paciente" placeholder="Nome do paciente (opcional)" style="width:60%;border-radius:8px;background:#0f172a;color:#e7eefc;border:1px solid #27314e;padding:6px;margin-right:8px"/>
        <button id="btn-add" style="margin-right:8px">Adicionar ao compilado</button>
        <button id="btn-copy" style="margin-right:8px">Copiar saída</button>
      </div>
      <label style="opacity:.85">Compilado (Leito 1..N):</label>
      <textarea id="compiled" style="width:100%;height:160px;border-radius:8px;background:#0f172a;color:#e7eefc;border:1px solid #27314e;padding:8px" readonly></textarea>
      <div>
        <button id="btn-export" style="margin-right:8px">Exportar .txt</button>
        <button id="btn-clear" style="margin-right:8px">Limpar compilado</button>
        <span id="counter" style="opacity:.8"></span>
      </div>
    </div>`;
  document.body.appendChild(wrap);
  wrap.querySelector('#lab-close').onclick=()=>wrap.remove();
  wrap.querySelector('#btn-clear-in').onclick=()=>{ wrap.querySelector('#in').value=''; };

  const KEY='LAB_COMPILADO_CXT_V6';
  const load = ()=>{ try{return JSON.parse(localStorage.getItem(KEY)||'[]')}catch(e){return[]} };
  const save = arr=> localStorage.setItem(KEY, JSON.stringify(arr));
  const refreshCompiled = ()=>{
    const arr = load().sort((a,b)=>a.slot-b.slot);
    const txt = arr.map(e=>`Leito ${e.slot}${e.nome? ' - '+e.nome:''}: ${e.line}`).join('\n');
    wrap.querySelector('#compiled').value = txt;
    wrap.querySelector('#counter').textContent = `Itens: ${arr.length}`;
  };

  const norm = t => t.replace(/\r/g,'').replace(/[\u00A0\t]+/g,' ').replace(/[ ]{2,}/g,' ').replace(/\s+\n/g,'\n');
  const toNum = s=>{ if(!s) return ''; const v=parseFloat(String(s).replace(/\./g,'').replace(',', '.')); return isNaN(v)?'':+v; };
  const toNumKeepDot = s=>{ if(!s) return ''; const v=parseFloat(String(s).replace(',', '.')); return isNaN(v)?'':+v; };
  const matchBlockValue = (T,label)=>{ const re=new RegExp(label+"[\\s\\S]{0,80}?([0-9]+(?:[.,][0-9]+)?)",'i'); const m=T.match(re); return m? toNumKeepDot(m[1]):''; };

  function extractLine(raw){
    if(!raw) return '';
    const T = norm(String(raw));

    // Hemograma
    const Hb    = matchBlockValue(T,'Hemoglobina');
    const Ht    = matchBlockValue(T,'Hemat[oó]crito');
    const Leuco = matchBlockValue(T,'Leuc[oó]citos');
    const Plaq  = matchBlockValue(T,'Plaquetas');
    const RDW   = matchBlockValue(T,'RDW');

    // Bioquímica
    const URE = matchBlockValue(T,'Ureia|Uréia');
    const CRE = matchBlockValue(T,'Creatinina');
    const NA  = matchBlockValue(T,'S[oó]dio');
    const K   = matchBlockValue(T,'Pot[áa]ssio');
    const MG  = matchBlockValue(T,'Magn[eé]sio');
    const CAI = matchBlockValue(T,'C[áa]lcio Ioniz|Calcio I[oô]nico');
    const PCR = matchBlockValue(T,'Prote[ií]na C Reativa|PCR');
    const TnI = matchBlockValue(T,'Troponina');

    // TGO/TGP/CK
    const TGO = matchBlockValue(T,'TGO|AST');
    const TGP = matchBlockValue(T,'TGP|ALT');
    const CK  = matchBlockValue(T,'Creatinofosfoquinase|CK');

    // Lipidograma
    const CTot = matchBlockValue(T,'Colesterol Total');
    const HDL  = matchBlockValue(T,'Colesterol HDL');
    const LDL  = matchBlockValue(T,'Colesterol LDL');
    const VLDL = matchBlockValue(T,'Colesterol VLDL');
    const TG   = matchBlockValue(T,'Triglic[ée]rides');

    // Ferro / Ferritina
    const Ferro     = matchBlockValue(T,'Ferro');
    const Ferritina = matchBlockValue(T,'Ferritina');

    // Hormônios
    const TSH = matchBlockValue(T,'TSH');
    const T4  = matchBlockValue(T,'T4(?!.*Livre)');

    // Coagulação
    const RNI = matchBlockValue(T,'RNI');
    const TTPA_rel = matchBlockValue(T,'Rela[çc][aã]o paciente/normal|Rela[çc][aã]o TTPA');

    // TFG (expressa >90 se aparecer "Superior a 90")
    let TFG='';
    const mTFG = T.match(/TFG[\s\S]{0,40}(Superior a 90|[0-9]{1,3})/i);
    if(mTFG){
      if(/Superior a 90/i.test(mTFG[1])) TFG='>90'; else TFG=toNum(mTFG[1]);
    }

    const tag=(k,v)=> v===''? '': `${k} ${v}`;
    const line=[
      tag('Hb',Hb), tag('Ht',Ht), tag('Leuco',Leuco), tag('Plaq',Plaq), tag('RDW',RDW),
      tag('URE',URE), tag('CRE',CRE), tag('NA',NA), tag('K',K), tag('MG',MG), tag('CAI',CAI),
      tag('PCR',PCR), tag('TnI',TnI), tag('RNI',RNI), tag('TTPA_rel',TTPA_rel),
      tag('TGO',TGO), tag('TGP',TGP), tag('CK',CK),
      tag('CTot',CTot), tag('HDL',HDL), tag('LDL',LDL), tag('VLDL',VLDL), tag('TG',TG),
      tag('Ferro',Ferro), tag('Ferritina',Ferritina), tag('TSH',TSH), tag('T4',T4), tag('TFG',TFG)
    ].filter(Boolean).join('; ');

    return line;
  }

  wrap.querySelector('#btn-extract').onclick=()=>{
    const input = wrap.querySelector('#in').value;
    const line = extractLine(input);
    wrap.querySelector('#out').value = line || 'Nenhum exame reconhecido.';
    console.log('[LAB] Linha →', line);
  };

  wrap.querySelector('#btn-copy').onclick=()=>{
    const text = wrap.querySelector('#out').value;
    try{ if(navigator.clipboard && window.isSecureContext && document.hasFocus()) return navigator.clipboard.writeText(text); }catch(e){}
    const ta=document.createElement('textarea'); ta.value=text; ta.style.position='fixed'; ta.style.top='-1000px'; document.body.appendChild(ta); ta.focus(); ta.select(); document.execCommand('copy'); document.body.removeChild(ta);
  };

  wrap.querySelector('#btn-add').onclick=()=>{
    const line=wrap.querySelector('#out').value.trim(); if(!line) return;
    const nome=wrap.querySelector('#paciente').value.trim();
    const arr=load();
    const used=new Set(arr.map(e=>e.slot)); let slot=1; while(used.has(slot)) slot++;
    arr.push({ ts:Date.now(), slot, nome, line }); save(arr); refreshCompiled();
  };

  wrap.querySelector('#btn-export').onclick=()=>{
    const txt=wrap.querySelector('#compiled').value;
    const blob=new Blob([txt],{type:'text/plain;charset=utf-8'});
    const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download='compilado_exames.txt'; a.click(); URL.revokeObjectURL(a.href);
  };

  wrap.querySelector('#btn-clear').onclick=()=>{ localStorage.removeItem(KEY); refreshCompiled(); };
  refreshCompiled();
})();
