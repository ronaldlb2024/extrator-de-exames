(function(){
  // ===== EXTRACTOR – Caixa de Texto (AFIP-optimizado v3) =====
  // Melhorias: identificação correta de gaso arterial/venosa; captura RNI, TTPA_rel; evita valores fictícios "2" quando gaso não existe.

  const OLD = document.getElementById('lab-panel-textbox'); if(OLD) OLD.remove();
  const wrap = document.createElement('div');
  wrap.id = 'lab-panel-textbox';
  wrap.style.cssText = 'position:fixed;right:12px;bottom:12px;z-index:2147483647;background:#0b1220;color:#e7eefc;border:1px solid #1f2b48;border-radius:12px;box-shadow:0 8px 24px rgba(0,0,0,.35);max-width:720px;width:720px;font:14px/1.45 system-ui,Segoe UI,Roboto,Helvetica,Arial;padding:12px';
  wrap.innerHTML = `
    <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px">
      <strong>Extrator de Exames – Caixa de Texto (AFIP v3)</strong>
      <div><button id="lab-close">Fechar</button></div>
    </div>
    <div style="display:grid;grid-template-columns:1fr;gap:8px">
      <label style="opacity:.85">Cole aqui o laudo bruto (Ctrl+V):</label>
      <textarea id="in" style="width:100%;height:180px;border-radius:8px;background:#0f172a;color:#e7eefc;border:1px solid #27314e;padding:8px"></textarea>
      <div>
        <button id="btn-extract" style="margin-right:8px">Extrair</button>
        <button id="btn-clear-in" style="margin-right:8px">Limpar entrada</button>
      </div>
      <label style="opacity:.85">Saída (linha pronta):</label>
      <textarea id="out" style="width:100%;height:140px;border-radius:8px;background:#0f172a;color:#e7eefc;border:1px solid #27314e;padding:8px"></textarea>
      <div>
        <input id="paciente" placeholder="Nome do paciente (opcional)" style="width:60%;border-radius:8px;background:#0f172a;color:#e7eefc;border:1px solid #27314e;padding:6px;margin-right:8px"/>
        <button id="btn-add" style="margin-right:8px">Adicionar ao compilado</button>
        <button id="btn-copy" style="margin-right:8px">Copiar saída</button>
      </div>
      <label style="opacity:.85">Compilado (Leito 1..N):</label>
      <textarea id="compiled" style="width:100%;height:160px;border-radius:8px;background:#0f172a;color:#e7eefc;border:1px solid #27314e;padding:8px" readonly></textarea>
      <div>
        <button id="btn-export" style="margin-right:8px">Exportar .txt</button>
        <button id="btn-clear" style="margin-right:8px">Limpar compilado</button>
        <span id="counter" style="opacity:.8"></span>
      </div>
    </div>`;
  document.body.appendChild(wrap);
  wrap.querySelector('#lab-close').onclick=()=>wrap.remove();
  wrap.querySelector('#btn-clear-in').onclick=()=>{ wrap.querySelector('#in').value=''; };

  const KEY='LAB_COMPILADO_CXT_V3';
  const load = ()=>{ try{return JSON.parse(localStorage.getItem(KEY)||'[]')}catch(e){return[]} };
  const save = arr=> localStorage.setItem(KEY, JSON.stringify(arr));
  const refreshCompiled = ()=>{
    const arr = load().sort((a,b)=>a.slot-b.slot);
    const txt = arr.map(e=>`Leito ${e.slot}${e.nome? ' - '+e.nome:''}: ${e.line}`).join('\n');
    wrap.querySelector('#compiled').value = txt;
    wrap.querySelector('#counter').textContent = `Itens: ${arr.length}`;
  };

  const norm = t => t.replace(/\r/g,'').replace(/[\u00A0\t]+/g,' ').replace(/[ ]{2,}/g,' ').replace(/\s+\n/g,'\n');
  const toNum = s=>{ if(!s) return ''; const v=parseFloat(String(s).replace(/\./g,'').replace(',', '.')); return isNaN(v)?'':+v; };

  // Detecta gaso
  function detectGasBlocks(T){
    const art = /Gasometria\s*Arterial|Gaso\s*Arterial/i.test(T);
    const ven = /Gasometria\s*Venosa|Gaso\s*Venosa/i.test(T);
    return {hasArt:art, hasVen:ven};
  }
  function extractGas(T,isArt){
    const scope = isArt? /Gasometria\s*Arterial|Gaso\s*Arterial/i:/Gasometria\s*Venosa|Gaso\s*Venosa/i;
    const blkMatch = T.split(/\n/).filter(l=>scope.test(l))[0];
    if(!blkMatch) return {};
    function findVal(label){
      const re = new RegExp(label+'[^\n]*([0-9]+(?:[.,][0-9]+)?)','i');
      const m = T.match(re); return m? toNum(m[1]):'';
    }
    return { pH:findVal('pH'), pO2:findVal('pO2'), pCO2:findVal('pCO2'), HCO3:findVal('HCO3|Bicarbonato'), BE:findVal('Excesso|Base'), Sat:findVal('Satur') };
  }

  // Extrator principal
  function extractLine(raw){
    if(!raw) return '';
    const T = norm(String(raw));
    const {hasArt, hasVen} = detectGasBlocks(T);

    const Hb = (T.match(/Hemoglobina[^\n]*([0-9]+[.,][0-9]+)/i)||[])[1];
    const Ht = (T.match(/Hemat[óo]crito[^\n]*([0-9]+[.,][0-9]+)/i)||[])[1];
    const Leuco = (T.match(/Leuc[óo]citos[^\n]*([0-9]+[.,][0-9]+)/i)||[])[1];
    const Plaq = (T.match(/Plaquetas[^\n]*([0-9]+[.,][0-9]+)/i)||[])[1];
    const URE = (T.match(/Ure[ií]a[^\n]*([0-9]+[.,][0-9]+)/i)||[])[1];
    const CRE = (T.match(/Creatinina[^\n]*([0-9]+[.,][0-9]+)/i)||[])[1];
    const NA = (T.match(/S[óo]dio[^\n]*([0-9]+[.,][0-9]+)/i)||[])[1];
    const K = (T.match(/Pot[áa]ssio[^\n]*([0-9]+[.,][0-9]+)/i)||[])[1];
    const MG = (T.match(/Magn[eé]sio[^\n]*([0-9]+[.,][0-9]+)/i)||[])[1];
    const CAI = (T.match(/C[áa]lcio\s*Ion|Cálcio\s*I[oô]nico[^\n]*([0-9]+[.,][0-9]+)/i)||[])[1];
    const PCR = (T.match(/Prote[ií]na\s*C\s*Reativa[^\n]*([0-9]+[.,][0-9]+)/i)||[])[1];
    const TnI = (T.match(/Troponina[^\n]*([0-9]+[.,][0-9]+)/i)||[])[1];
    const RNI = (T.match(/RNI[^\n]*([0-9]+[.,][0-9]+)/i)||[])[1];
    const TTPArel = (T.match(/Rela[çc][aã]o[^\n]*([0-9]+[.,][0-9]+)/i)||[])[1];

    const GA = hasArt? extractGas(T,true):{};
    const GV = hasVen? extractGas(T,false):{};

    const tag=(k,v)=> v?`${k} ${v}`:'';

    return [
      tag('Hb',Hb), tag('Ht',Ht), tag('Leuco',Leuco), tag('Plaq',Plaq),
      tag('URE',URE), tag('CRE',CRE), tag('NA',NA), tag('K',K), tag('MG',MG), tag('CAI',CAI),
      tag('pH(a)',GA.pH), tag('pO2(a)',GA.pO2), tag('pCO2(a)',GA.pCO2), tag('HCO3(a)',GA.HCO3), tag('BE(a)',GA.BE), tag('SatO2(a)',GA.Sat),
      tag('pH(v)',GV.pH), tag('pO2(v)',GV.pO2), tag('pCO2(v)',GV.pCO2), tag('HCO3(v)',GV.HCO3), tag('BE(v)',GV.BE), tag('SatO2(v)',GV.Sat),
      tag('PCR',PCR), tag('TnI',TnI), tag('RNI',RNI), tag('TTPA_rel',TTPArel)
    ].filter(Boolean).join('; ');
  }

  wrap.querySelector('#btn-extract').onclick = ()=>{
    const input = wrap.querySelector('#in').value;
    const line = extractLine(input);
    wrap.querySelector('#out').value = line || 'Nenhum exame reconhecido.';
  };

  wrap.querySelector('#btn-copy').onclick = ()=>{
    const text = wrap.querySelector('#out').value;
    navigator.clipboard?.writeText(text);
  };

  wrap.querySelector('#btn-add').onclick = ()=>{
    const line = wrap.querySelector('#out').value.trim(); if(!line) return;
    const nome = wrap.querySelector('#paciente').value.trim();
    const arr = load();
    const used = new Set(arr.map(e=>e.slot)); let slot=1; while(used.has(slot)) slot++;
    arr.push({ ts: Date.now(), slot, nome, line }); save(arr); refreshCompiled();
  };

  wrap.querySelector('#btn-export').onclick=()=>{
    const txt = wrap.querySelector('#compiled').value;
    const blob=new Blob([txt],{type:'text/plain;charset=utf-8'});
    const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download='compilado_exames.txt'; a.click(); URL.revokeObjectURL(a.href);
  };

  wrap.querySelector('#btn-clear').onclick=()=>{ localStorage.removeItem(KEY); refreshCompiled(); };

  refreshCompiled();
})();
